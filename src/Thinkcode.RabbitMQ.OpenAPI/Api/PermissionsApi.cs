/* 
 * Rabbitmq Http API
 *
 * This is the OpenAPI specification of the RabbitMQ HTTP API. For more information, please refer to [HTTP API](https://cdn.rawgit.com/rabbitmq/rabbitmq-management/v3.7.14/priv/www/api/index.html) official documentation.
 *
 * OpenAPI spec version: 1.0
 * Contact: carlos@adaptive.me
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Thinkcode.RabbitMQ.OpenAPI.Client;
using Thinkcode.RabbitMQ.OpenAPI.Model;

namespace Thinkcode.RabbitMQ.OpenAPI.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPermissionsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// List User Permissions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user"></param>
        /// <returns>List&lt;PermissionUser&gt;</returns>
        List<PermissionUser> ListUserPermissions (string user);

        /// <summary>
        /// List User Permissions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user"></param>
        /// <returns>ApiResponse of List&lt;PermissionUser&gt;</returns>
        ApiResponse<List<PermissionUser>> ListUserPermissionsWithHttpInfo (string user);
        /// <summary>
        /// List Users Topic Permissions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user"></param>
        /// <returns>List&lt;PermissionTopic&gt;</returns>
        List<PermissionTopic> ListUsersTopicPermissions (string user);

        /// <summary>
        /// List Users Topic Permissions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user"></param>
        /// <returns>ApiResponse of List&lt;PermissionTopic&gt;</returns>
        ApiResponse<List<PermissionTopic>> ListUsersTopicPermissionsWithHttpInfo (string user);
        /// <summary>
        /// List Users without Permissions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;User&gt;</returns>
        List<User> ListUsersWithoutPermissions ();

        /// <summary>
        /// List Users without Permissions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;User&gt;</returns>
        ApiResponse<List<User>> ListUsersWithoutPermissionsWithHttpInfo ();
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPermissionsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// List User Permissions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user"></param>
        /// <returns>Task of List&lt;PermissionUser&gt;</returns>
        System.Threading.Tasks.Task<List<PermissionUser>> ListUserPermissionsAsync (string user);

        /// <summary>
        /// List User Permissions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user"></param>
        /// <returns>Task of ApiResponse (List&lt;PermissionUser&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PermissionUser>>> ListUserPermissionsAsyncWithHttpInfo (string user);
        /// <summary>
        /// List Users Topic Permissions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user"></param>
        /// <returns>Task of List&lt;PermissionTopic&gt;</returns>
        System.Threading.Tasks.Task<List<PermissionTopic>> ListUsersTopicPermissionsAsync (string user);

        /// <summary>
        /// List Users Topic Permissions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user"></param>
        /// <returns>Task of ApiResponse (List&lt;PermissionTopic&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PermissionTopic>>> ListUsersTopicPermissionsAsyncWithHttpInfo (string user);
        /// <summary>
        /// List Users without Permissions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;User&gt;</returns>
        System.Threading.Tasks.Task<List<User>> ListUsersWithoutPermissionsAsync ();

        /// <summary>
        /// List Users without Permissions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;User&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<User>>> ListUsersWithoutPermissionsAsyncWithHttpInfo ();
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPermissionsApi : IPermissionsApiSync, IPermissionsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PermissionsApi : IPermissionsApi
    {
        private Thinkcode.RabbitMQ.OpenAPI.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PermissionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PermissionsApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PermissionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PermissionsApi(String basePath)
        {
            this.Configuration = Thinkcode.RabbitMQ.OpenAPI.Client.Configuration.MergeConfigurations(
                Thinkcode.RabbitMQ.OpenAPI.Client.GlobalConfiguration.Instance,
                new Thinkcode.RabbitMQ.OpenAPI.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Thinkcode.RabbitMQ.OpenAPI.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Thinkcode.RabbitMQ.OpenAPI.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Thinkcode.RabbitMQ.OpenAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PermissionsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PermissionsApi(Thinkcode.RabbitMQ.OpenAPI.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Thinkcode.RabbitMQ.OpenAPI.Client.Configuration.MergeConfigurations(
                Thinkcode.RabbitMQ.OpenAPI.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Thinkcode.RabbitMQ.OpenAPI.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Thinkcode.RabbitMQ.OpenAPI.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Thinkcode.RabbitMQ.OpenAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PetApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public PermissionsApi(Thinkcode.RabbitMQ.OpenAPI.Client.ISynchronousClient client,Thinkcode.RabbitMQ.OpenAPI.Client.IAsynchronousClient asyncClient, Thinkcode.RabbitMQ.OpenAPI.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Thinkcode.RabbitMQ.OpenAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Thinkcode.RabbitMQ.OpenAPI.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Thinkcode.RabbitMQ.OpenAPI.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Thinkcode.RabbitMQ.OpenAPI.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Thinkcode.RabbitMQ.OpenAPI.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// List User Permissions 
        /// </summary>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user"></param>
        /// <returns>List&lt;PermissionUser&gt;</returns>
        public List<PermissionUser> ListUserPermissions (string user)
        {
             Thinkcode.RabbitMQ.OpenAPI.Client.ApiResponse<List<PermissionUser>> localVarResponse = ListUserPermissionsWithHttpInfo(user);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List User Permissions 
        /// </summary>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user"></param>
        /// <returns>ApiResponse of List&lt;PermissionUser&gt;</returns>
        public Thinkcode.RabbitMQ.OpenAPI.Client.ApiResponse< List<PermissionUser> > ListUserPermissionsWithHttpInfo (string user)
        {
            // verify the required parameter 'user' is set
            if (user == null)
                throw new Thinkcode.RabbitMQ.OpenAPI.Client.ApiException(400, "Missing required parameter 'user' when calling PermissionsApi->ListUserPermissions");

            Thinkcode.RabbitMQ.OpenAPI.Client.RequestOptions requestOptions = new Thinkcode.RabbitMQ.OpenAPI.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (user != null)
                requestOptions.PathParameters.Add("user", Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.ParameterToString(user)); // path parameter

            // authentication (basic_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Basic " + Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var response = this.Client.Get< List<PermissionUser> >("/users/{user}/permissions", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ListUserPermissions", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// List User Permissions 
        /// </summary>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user"></param>
        /// <returns>Task of List&lt;PermissionUser&gt;</returns>
        public async System.Threading.Tasks.Task<List<PermissionUser>> ListUserPermissionsAsync (string user)
        {
             Thinkcode.RabbitMQ.OpenAPI.Client.ApiResponse<List<PermissionUser>> localVarResponse = await ListUserPermissionsAsyncWithHttpInfo(user);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List User Permissions 
        /// </summary>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user"></param>
        /// <returns>Task of ApiResponse (List&lt;PermissionUser&gt;)</returns>
        public async System.Threading.Tasks.Task<Thinkcode.RabbitMQ.OpenAPI.Client.ApiResponse<List<PermissionUser>>> ListUserPermissionsAsyncWithHttpInfo (string user)
        {
            // verify the required parameter 'user' is set
            if (user == null)
                throw new Thinkcode.RabbitMQ.OpenAPI.Client.ApiException(400, "Missing required parameter 'user' when calling PermissionsApi->ListUserPermissions");


            Thinkcode.RabbitMQ.OpenAPI.Client.RequestOptions requestOptions = new Thinkcode.RabbitMQ.OpenAPI.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (user != null)
                requestOptions.PathParameters.Add("user", Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.ParameterToString(user)); // path parameter

            // authentication (basic_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Basic " + Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<List<PermissionUser>>("/users/{user}/permissions", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ListUserPermissions", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// List Users Topic Permissions 
        /// </summary>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user"></param>
        /// <returns>List&lt;PermissionTopic&gt;</returns>
        public List<PermissionTopic> ListUsersTopicPermissions (string user)
        {
             Thinkcode.RabbitMQ.OpenAPI.Client.ApiResponse<List<PermissionTopic>> localVarResponse = ListUsersTopicPermissionsWithHttpInfo(user);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Users Topic Permissions 
        /// </summary>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user"></param>
        /// <returns>ApiResponse of List&lt;PermissionTopic&gt;</returns>
        public Thinkcode.RabbitMQ.OpenAPI.Client.ApiResponse< List<PermissionTopic> > ListUsersTopicPermissionsWithHttpInfo (string user)
        {
            // verify the required parameter 'user' is set
            if (user == null)
                throw new Thinkcode.RabbitMQ.OpenAPI.Client.ApiException(400, "Missing required parameter 'user' when calling PermissionsApi->ListUsersTopicPermissions");

            Thinkcode.RabbitMQ.OpenAPI.Client.RequestOptions requestOptions = new Thinkcode.RabbitMQ.OpenAPI.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (user != null)
                requestOptions.PathParameters.Add("user", Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.ParameterToString(user)); // path parameter

            // authentication (basic_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Basic " + Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var response = this.Client.Get< List<PermissionTopic> >("/users/{user}/topic-permissions", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ListUsersTopicPermissions", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// List Users Topic Permissions 
        /// </summary>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user"></param>
        /// <returns>Task of List&lt;PermissionTopic&gt;</returns>
        public async System.Threading.Tasks.Task<List<PermissionTopic>> ListUsersTopicPermissionsAsync (string user)
        {
             Thinkcode.RabbitMQ.OpenAPI.Client.ApiResponse<List<PermissionTopic>> localVarResponse = await ListUsersTopicPermissionsAsyncWithHttpInfo(user);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Users Topic Permissions 
        /// </summary>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user"></param>
        /// <returns>Task of ApiResponse (List&lt;PermissionTopic&gt;)</returns>
        public async System.Threading.Tasks.Task<Thinkcode.RabbitMQ.OpenAPI.Client.ApiResponse<List<PermissionTopic>>> ListUsersTopicPermissionsAsyncWithHttpInfo (string user)
        {
            // verify the required parameter 'user' is set
            if (user == null)
                throw new Thinkcode.RabbitMQ.OpenAPI.Client.ApiException(400, "Missing required parameter 'user' when calling PermissionsApi->ListUsersTopicPermissions");


            Thinkcode.RabbitMQ.OpenAPI.Client.RequestOptions requestOptions = new Thinkcode.RabbitMQ.OpenAPI.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (user != null)
                requestOptions.PathParameters.Add("user", Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.ParameterToString(user)); // path parameter

            // authentication (basic_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Basic " + Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<List<PermissionTopic>>("/users/{user}/topic-permissions", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ListUsersTopicPermissions", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// List Users without Permissions 
        /// </summary>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;User&gt;</returns>
        public List<User> ListUsersWithoutPermissions ()
        {
             Thinkcode.RabbitMQ.OpenAPI.Client.ApiResponse<List<User>> localVarResponse = ListUsersWithoutPermissionsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Users without Permissions 
        /// </summary>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;User&gt;</returns>
        public Thinkcode.RabbitMQ.OpenAPI.Client.ApiResponse< List<User> > ListUsersWithoutPermissionsWithHttpInfo ()
        {
            Thinkcode.RabbitMQ.OpenAPI.Client.RequestOptions requestOptions = new Thinkcode.RabbitMQ.OpenAPI.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (basic_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Basic " + Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var response = this.Client.Get< List<User> >("/users/without-permissions", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ListUsersWithoutPermissions", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// List Users without Permissions 
        /// </summary>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;User&gt;</returns>
        public async System.Threading.Tasks.Task<List<User>> ListUsersWithoutPermissionsAsync ()
        {
             Thinkcode.RabbitMQ.OpenAPI.Client.ApiResponse<List<User>> localVarResponse = await ListUsersWithoutPermissionsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Users without Permissions 
        /// </summary>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;User&gt;)</returns>
        public async System.Threading.Tasks.Task<Thinkcode.RabbitMQ.OpenAPI.Client.ApiResponse<List<User>>> ListUsersWithoutPermissionsAsyncWithHttpInfo ()
        {

            Thinkcode.RabbitMQ.OpenAPI.Client.RequestOptions requestOptions = new Thinkcode.RabbitMQ.OpenAPI.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            

            // authentication (basic_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Basic " + Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<List<User>>("/users/without-permissions", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ListUsersWithoutPermissions", response);
                if (exception != null) throw exception;
            }

            return response;
        }

    }
}
