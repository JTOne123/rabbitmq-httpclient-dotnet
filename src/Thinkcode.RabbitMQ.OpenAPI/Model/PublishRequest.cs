/* 
 * Rabbitmq Http API
 *
 * This is the OpenAPI specification of the RabbitMQ HTTP API. For more information, please refer to [HTTP API](https://cdn.rawgit.com/rabbitmq/rabbitmq-management/v3.7.14/priv/www/api/index.html) official documentation.
 *
 * OpenAPI spec version: 1.0
 * Contact: carlos@adaptive.me
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = Thinkcode.RabbitMQ.OpenAPI.Client.OpenAPIDateConverter;

namespace Thinkcode.RabbitMQ.OpenAPI.Model
{
    /// <summary>
    /// PublishRequest
    /// </summary>
    [DataContract]
    public partial class PublishRequest :  IEquatable<PublishRequest>
    {
        /// <summary>
        /// Defines PayloadEncoding
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PayloadEncodingEnum
        {
            /// <summary>
            /// Enum String for value: string
            /// </summary>
            [EnumMember(Value = "string")]
            String = 1,

            /// <summary>
            /// Enum Base64 for value: base64
            /// </summary>
            [EnumMember(Value = "base64")]
            Base64 = 2

        }

        /// <summary>
        /// Gets or Sets PayloadEncoding
        /// </summary>
        [DataMember(Name="payload_encoding", EmitDefaultValue=false)]
        public PayloadEncodingEnum PayloadEncoding { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PublishRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PublishRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PublishRequest" /> class.
        /// </summary>
        /// <param name="routingKey">routingKey (required).</param>
        /// <param name="payload">payload (required).</param>
        /// <param name="payloadEncoding">payloadEncoding (required) (default to PayloadEncodingEnum.String).</param>
        /// <param name="properties">properties.</param>
        public PublishRequest(string routingKey = default(string), string payload = default(string), PayloadEncodingEnum payloadEncoding = PayloadEncodingEnum.String, PublishProperties properties = default(PublishProperties))
        {
            // to ensure "routingKey" is required (not null)
            if (routingKey == null)
            {
                throw new InvalidDataException("routingKey is a required property for PublishRequest and cannot be null");
            }
            else
            {
                this.RoutingKey = routingKey;
            }

            // to ensure "payload" is required (not null)
            if (payload == null)
            {
                throw new InvalidDataException("payload is a required property for PublishRequest and cannot be null");
            }
            else
            {
                this.Payload = payload;
            }

            this.PayloadEncoding = payloadEncoding;
            this.Properties = properties;
        }
        
        /// <summary>
        /// Gets or Sets RoutingKey
        /// </summary>
        [DataMember(Name="routing_key", EmitDefaultValue=false)]
        public string RoutingKey { get; set; }

        /// <summary>
        /// Gets or Sets Payload
        /// </summary>
        [DataMember(Name="payload", EmitDefaultValue=false)]
        public string Payload { get; set; }

        /// <summary>
        /// Gets or Sets Properties
        /// </summary>
        [DataMember(Name="properties", EmitDefaultValue=false)]
        public PublishProperties Properties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PublishRequest {\n");
            sb.Append("  RoutingKey: ").Append(RoutingKey).Append("\n");
            sb.Append("  Payload: ").Append(Payload).Append("\n");
            sb.Append("  PayloadEncoding: ").Append(PayloadEncoding).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PublishRequest);
        }

        /// <summary>
        /// Returns true if PublishRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of PublishRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PublishRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RoutingKey == input.RoutingKey ||
                    (this.RoutingKey != null &&
                    this.RoutingKey.Equals(input.RoutingKey))
                ) && 
                (
                    this.Payload == input.Payload ||
                    (this.Payload != null &&
                    this.Payload.Equals(input.Payload))
                ) && 
                (
                    this.PayloadEncoding == input.PayloadEncoding ||
                    this.PayloadEncoding.Equals(input.PayloadEncoding)
                ) && 
                (
                    this.Properties == input.Properties ||
                    (this.Properties != null &&
                    this.Properties.Equals(input.Properties))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RoutingKey != null)
                    hashCode = hashCode * 59 + this.RoutingKey.GetHashCode();
                if (this.Payload != null)
                    hashCode = hashCode * 59 + this.Payload.GetHashCode();
                hashCode = hashCode * 59 + this.PayloadEncoding.GetHashCode();
                if (this.Properties != null)
                    hashCode = hashCode * 59 + this.Properties.GetHashCode();
                return hashCode;
            }
        }

    }

}
