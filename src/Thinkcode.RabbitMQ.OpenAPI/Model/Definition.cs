/* 
 * Rabbitmq Http API
 *
 * This is the OpenAPI specification of the RabbitMQ HTTP API. For more information, please refer to [HTTP API](https://cdn.rawgit.com/rabbitmq/rabbitmq-management/v3.7.14/priv/www/api/index.html) official documentation.
 *
 * OpenAPI spec version: 1.0
 * Contact: carlos@adaptive.me
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = Thinkcode.RabbitMQ.OpenAPI.Client.OpenAPIDateConverter;

namespace Thinkcode.RabbitMQ.OpenAPI.Model
{
    /// <summary>
    /// Definition
    /// </summary>
    [DataContract]
    public partial class Definition :  IEquatable<Definition>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Definition" /> class.
        /// </summary>
        /// <param name="bindings">bindings.</param>
        /// <param name="exchanges">exchanges.</param>
        /// <param name="parameters">parameters.</param>
        /// <param name="policies">policies.</param>
        /// <param name="queues">queues.</param>
        /// <param name="rabbitVersion">rabbitVersion.</param>
        public Definition(List<Binding> bindings = default(List<Binding>), List<Exchange> exchanges = default(List<Exchange>), List<Object> parameters = default(List<Object>), List<Object> policies = default(List<Object>), List<Queue> queues = default(List<Queue>), string rabbitVersion = default(string))
        {
            this.Bindings = bindings;
            this.Exchanges = exchanges;
            this.Parameters = parameters;
            this.Policies = policies;
            this.Queues = queues;
            this.RabbitVersion = rabbitVersion;
        }
        
        /// <summary>
        /// Gets or Sets Bindings
        /// </summary>
        [DataMember(Name="bindings", EmitDefaultValue=false)]
        public List<Binding> Bindings { get; set; }

        /// <summary>
        /// Gets or Sets Exchanges
        /// </summary>
        [DataMember(Name="exchanges", EmitDefaultValue=false)]
        public List<Exchange> Exchanges { get; set; }

        /// <summary>
        /// Gets or Sets Parameters
        /// </summary>
        [DataMember(Name="parameters", EmitDefaultValue=false)]
        public List<Object> Parameters { get; set; }

        /// <summary>
        /// Gets or Sets Policies
        /// </summary>
        [DataMember(Name="policies", EmitDefaultValue=false)]
        public List<Object> Policies { get; set; }

        /// <summary>
        /// Gets or Sets Queues
        /// </summary>
        [DataMember(Name="queues", EmitDefaultValue=false)]
        public List<Queue> Queues { get; set; }

        /// <summary>
        /// Gets or Sets RabbitVersion
        /// </summary>
        [DataMember(Name="rabbit_version", EmitDefaultValue=false)]
        public string RabbitVersion { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Definition {\n");
            sb.Append("  Bindings: ").Append(Bindings).Append("\n");
            sb.Append("  Exchanges: ").Append(Exchanges).Append("\n");
            sb.Append("  Parameters: ").Append(Parameters).Append("\n");
            sb.Append("  Policies: ").Append(Policies).Append("\n");
            sb.Append("  Queues: ").Append(Queues).Append("\n");
            sb.Append("  RabbitVersion: ").Append(RabbitVersion).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Definition);
        }

        /// <summary>
        /// Returns true if Definition instances are equal
        /// </summary>
        /// <param name="input">Instance of Definition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Definition input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Bindings == input.Bindings ||
                    this.Bindings != null &&
                    this.Bindings.SequenceEqual(input.Bindings)
                ) && 
                (
                    this.Exchanges == input.Exchanges ||
                    this.Exchanges != null &&
                    this.Exchanges.SequenceEqual(input.Exchanges)
                ) && 
                (
                    this.Parameters == input.Parameters ||
                    this.Parameters != null &&
                    this.Parameters.SequenceEqual(input.Parameters)
                ) && 
                (
                    this.Policies == input.Policies ||
                    this.Policies != null &&
                    this.Policies.SequenceEqual(input.Policies)
                ) && 
                (
                    this.Queues == input.Queues ||
                    this.Queues != null &&
                    this.Queues.SequenceEqual(input.Queues)
                ) && 
                (
                    this.RabbitVersion == input.RabbitVersion ||
                    (this.RabbitVersion != null &&
                    this.RabbitVersion.Equals(input.RabbitVersion))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Bindings != null)
                    hashCode = hashCode * 59 + this.Bindings.GetHashCode();
                if (this.Exchanges != null)
                    hashCode = hashCode * 59 + this.Exchanges.GetHashCode();
                if (this.Parameters != null)
                    hashCode = hashCode * 59 + this.Parameters.GetHashCode();
                if (this.Policies != null)
                    hashCode = hashCode * 59 + this.Policies.GetHashCode();
                if (this.Queues != null)
                    hashCode = hashCode * 59 + this.Queues.GetHashCode();
                if (this.RabbitVersion != null)
                    hashCode = hashCode * 59 + this.RabbitVersion.GetHashCode();
                return hashCode;
            }
        }

    }

}
